{"version":3,"sources":["components/info.jsx","components/Form.jsx","components/Weather.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Info","Fragment","Form","props","onSubmit","gettingWeather","type","name","placeholder","Weather","city","country","temp","tempFeels","sunrise","sunset","pressure","className","error","API_KEY","App","e","a","preventDefault","cityName","target","elements","value","fetch","API_URL","json","data","cod","setState","sunsetInSec","sys","sunriseInSec","sunseDate","Date","sunriseDate","timeSunset","toLocaleTimeString","timeSunrise","Math","round","main","feels_like","undefined","state","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"6PAWeA,EATF,WACX,OACE,kBAAC,IAAMC,SAAP,KACE,6IACA,gLCOSC,EAXF,SAAAC,GACX,OACE,kBAAC,IAAMF,SAAP,KACE,0BAAMG,SAAUD,EAAME,gBACpB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,mCAC3C,4HCgCOC,EArCC,SAAAN,GACd,OACE,kBAAC,IAAMF,SAAP,KACGE,EAAMO,KACL,4BACE,8DAEE,2BACGP,EAAMO,KADT,KACiBP,EAAMQ,UAGzB,mGACe,2BAAIR,EAAMS,KAAV,YAEf,oGACgB,2BAAIT,EAAMU,UAAV,YAEhB,2EACW,2BAAIV,EAAMW,UAErB,+DACS,2BAAIX,EAAMY,SAEnB,iFACY,2BAAIZ,EAAMa,SAAV,OAGZ,KACJ,4BACE,wBAAIC,UAAU,SACZ,2BAAId,EAAMe,WC5BdC,EAAU,mCAuFDC,E,4MApFbf,e,uCAAiB,WAAMgB,GAAN,+BAAAC,EAAA,yDACfD,EAAEE,mBACIC,EAAWH,EAAEI,OAAOC,SAAShB,KAAKiB,OAFzB,iCAKSC,MAAM,qDAAD,OAC4BJ,EAD5B,kBAC8CL,EAD9C,kBALd,cAKPU,EALO,gBASMA,EAAQC,OATd,UAWI,SAFXC,EATO,QAWJC,IAXI,wBAYX,EAAKC,SAAS,CACZf,MAAO,mKAbE,2BAkBTgB,EAAcH,EAAKI,IAAIpB,OACvBqB,EAAeL,EAAKI,IAAIrB,QAExBuB,EAAY,IAAIC,KAAmB,IAAdJ,GACrBK,EAAc,IAAID,KAAoB,IAAfF,GAEvBI,EAAaH,EAAUI,qBACvBC,EAAcH,EAAYE,qBAE9B,EAAKR,SAAS,CACZrB,KAAM+B,KAAKC,MAAMb,EAAKc,KAAKjC,MAC3BC,UAAW8B,KAAKC,MAAMb,EAAKc,KAAKC,YAChCpC,KAAMqB,EAAKxB,KACXI,QAASoB,EAAKI,IAAIxB,QAClBG,QAAS4B,EACT3B,OAAQyB,EACRxB,SAAUe,EAAKc,KAAK7B,SACpBE,WAAO6B,IAnCI,wBAsCb,EAAKd,SAAS,CACZrB,UAAMmC,EACNrC,UAAMqC,EACNpC,aAASoC,EACTjC,aAASiC,EACThC,YAAQgC,EACR7B,MAAO,qIA5CI,4C,wDAiDjB8B,MAAQ,CACNpC,UAAMmC,EACNrC,UAAMqC,EACNpC,aAASoC,EACTjC,aAASiC,EACThC,YAAQgC,EACR7B,WAAO6B,G,uDAIP,OACE,8BACE,yBAAK9B,UAAU,iBACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,kBACb,kBAAC,EAAD,CAAMZ,eAAgB4C,KAAK5C,iBAC3B,yBAAKY,UAAU,0BACb,kBAAC,EAAD,CACEL,KAAMqC,KAAKD,MAAMpC,KACjBC,UAAWoC,KAAKD,MAAMnC,UACtBH,KAAMuC,KAAKD,MAAMtC,KACjBC,QAASsC,KAAKD,MAAMrC,QACpBG,QAASmC,KAAKD,MAAMlC,QACpBC,OAAQkC,KAAKD,MAAMjC,OACnBG,MAAO+B,KAAKD,MAAM9B,MAClBF,SAAUiC,KAAKD,MAAMhC,kB,GA5EjBkC,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAjD,GACLkD,QAAQlD,MAAMA,EAAMmD,a","file":"static/js/main.bd2b511b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Info = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <h1>Погодное приложение</h1>\r\n      <h2>Узнай погоду в своем городе</h2>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Info;\r\n","import React from \"react\";\r\n\r\nconst Form = props => {\r\n  return (\r\n    <React.Fragment>\r\n      <form onSubmit={props.gettingWeather}>\r\n        <input type=\"text\" name=\"city\" placeholder=\"город\" />\r\n        <button>Получить погоду</button>\r\n      </form>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nconst Weather = props => {\r\n  return (\r\n    <React.Fragment>\r\n      {props.city ? (\r\n        <ul>\r\n          <li>\r\n            Город:\r\n            <p>\r\n              {props.city}, {props.country}\r\n            </p>\r\n          </li>\r\n          <li>\r\n            Температура: <p>{props.temp} &#8451;</p>\r\n          </li>\r\n          <li>\r\n            Ощущение как: <p>{props.tempFeels} &#8451;</p>\r\n          </li>\r\n          <li>\r\n            Рассвет: <p>{props.sunrise}</p>\r\n          </li>\r\n          <li>\r\n            Закат: <p>{props.sunset}</p>\r\n          </li>\r\n          <li>\r\n            Давление: <p>{props.pressure} </p>\r\n          </li>\r\n        </ul>\r\n      ) : null}\r\n      <ul>\r\n        <li className=\"error\">\r\n          <p>{props.error}</p>\r\n        </li>\r\n      </ul>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n","import React from \"react\";\nimport Info from \"./components/info\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\nconst API_KEY = \"8eac5cac921e783ce5d10971051114ce\";\n\nclass App extends React.Component {\n  gettingWeather = async e => {\n    e.preventDefault();\n    const cityName = e.target.elements.city.value;\n\n    if (cityName) {\n      const API_URL = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${API_KEY}&units=metric`\n      );\n\n      const data = await API_URL.json();\n\n      if (data.cod === \"404\") {\n        this.setState({\n          error: \"Неправильное название города\"\n        });\n        return;\n      }\n\n      let sunsetInSec = data.sys.sunset;\n      let sunriseInSec = data.sys.sunrise;\n\n      let sunseDate = new Date(sunsetInSec * 1000);\n      let sunriseDate = new Date(sunriseInSec * 1000);\n\n      let timeSunset = sunseDate.toLocaleTimeString();\n      let timeSunrise = sunriseDate.toLocaleTimeString();\n\n      this.setState({\n        temp: Math.round(data.main.temp),\n        tempFeels: Math.round(data.main.feels_like),\n        city: data.name,\n        country: data.sys.country,\n        sunrise: timeSunrise,\n        sunset: timeSunset,\n        pressure: data.main.pressure,\n        error: undefined\n      });\n    } else {\n      this.setState({\n        temp: undefined,\n        city: undefined,\n        country: undefined,\n        sunrise: undefined,\n        sunset: undefined,\n        error: \"Введите название города\"\n      });\n    }\n  };\n\n  state = {\n    temp: undefined,\n    city: undefined,\n    country: undefined,\n    sunrise: undefined,\n    sunset: undefined,\n    error: undefined\n  };\n\n  render() {\n    return (\n      <main>\n        <div className=\"weather__info\">\n          <Info />\n        </div>\n        <div className=\"weather__input\">\n          <Form gettingWeather={this.gettingWeather} />\n          <div className=\"weather__input__result\">\n            <Weather\n              temp={this.state.temp}\n              tempFeels={this.state.tempFeels}\n              city={this.state.city}\n              country={this.state.country}\n              sunrise={this.state.sunrise}\n              sunset={this.state.sunset}\n              error={this.state.error}\n              pressure={this.state.pressure}\n            />\n          </div>\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./normalize.css\";\nimport \"./index.css\";\n\nimport App from \"./App.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}